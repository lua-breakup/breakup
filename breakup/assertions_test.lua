local tests = {}

local asserts = require "breakup.assertions"

function tests:assert_true()
	asserts.assert_true(true)
	asserts.assert_true(true, "assert_true shouldn't fail when true and a message is passed.")
	asserts.assert_error(function()
		asserts.assert_true(false)
	end, "assert_true should fail with a false value.")
	asserts.assert_error(function()
		asserts.assert_true(false, "This should fail.")
	end, "assert_true should fail with a false value and a message.")
	asserts.assert_error(function()
		asserts.assert_true({})
	end, "assert_true should fail with a truthey but not true value.")
	asserts.assert_error(function()
		asserts.assert_true({}, "This should fail.")
	end, "assert_true should fail with a truthey but not true value and a message.")
end

function tests:assert_false()
	asserts.assert_false(false)
	asserts.assert_false(false, "assert_false shouldn't fail when false and a message is passed.")
	asserts.assert_error(function()
		asserts.assert_false(true)
	end, "assert_false should fail with a true value.")
	asserts.assert_error(function()
		asserts.assert_false(true, "This should fail.")
	end, "assert_false should fail with a true value and a message.")
	asserts.assert_error(function()
		asserts.assert_false(nil)
	end, "assert_false should fail with a nil value.")
	asserts.assert_error(function()
		asserts.assert_false(nil, "This should fail.")
	end, "assert_false should fail with a nil value and a message.")
end

function tests:assert_nil()
	asserts.assert_nil(nil)
	asserts.assert_nil(nil, "assert_nil shouldn't fail when nil and a message is passed.")
	asserts.assert_error(function()
		asserts.assert_nil(true)
	end, "assert_nil should fail with a true value.")
	asserts.assert_error(function()
		asserts.assert_nil(false)
	end, "assert_nil should fail with a false value.")
	asserts.assert_error(function()
		asserts.assert_nil(true, "This should fail.")
	end, "assert_nil should fail with a true value and a message.")
	asserts.assert_error(function()
		asserts.assert_nil(false, "This should fail.")
	end, "assert_nil should fail with a false value and a message.")
end

function tests:assert_equal()
	local t = {a=0,b={c="d"}}
	asserts.assert_equal("a", "a")
	asserts.assert_equal("a", "a", 3)
	asserts.assert_equal(t, t)
	asserts.assert_equal(5, 5)
	asserts.assert_equal(5, 0, 5)
	asserts.assert_equal(0, 5, 5)
	asserts.assert_equal("a", "a", "assert_equal for equal strings and message shouldn't fail.")
	asserts.assert_equal("a", "a", 3, "assert_equal for equal strings with a tolerance and a messeage shouldn't fail.")
	asserts.assert_equal(t, t, "assert_equal with same table referenece and message shouldn't fail.")
	asserts.assert_equal(5, 5, "assert_equal for equal numbers without tolerance and message shouldn't fail.")
	asserts.assert_equal(5, 0, 5, "assert_equal for numbers within given tolerance downward and message shouldn't fail.")
	asserts.assert_equal(0, 5, 5, "assert_equal for numbers within given tolerance upward and message shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_equal("a", "b")
	end, "assert_equal should fail for different strings.")
	asserts.assert_error(function()
		asserts.assert_equal("a", "b", 3)
	end, "assert_equal should fail for different strings with a tolerance.")
	asserts.assert_error(function()
		asserts.assert_equal("a", "b", "This should fail.")
	end, "assert_equal should fail for different strings with a message.")
	asserts.assert_error(function()
		asserts.assert_equal("a", "b", 3, "This should fail.")
	end, "assert_equal should fail for different strings with a message and a tolerance.")
	asserts.assert_error(function()
		asserts.assert_equal(t, {a=0,b={c="d"}})
	end, "assert_equal should fail for identical tables with a different reference.")
	asserts.assert_error(function()
		asserts.assert_equal(t, {a=0,b={c="d"}}, 3)
	end, "assert_equal should fail for identical tables with a different reference and a tolerance.")
	asserts.assert_error(function()
		asserts.assert_equal(t, {a=0,b={c="d"}}, "This should fail.")
	end, "assert_equal should fail for identical tables with a different reference and a message.")
	asserts.assert_error(function()
		asserts.assert_equal(t, {a=0,b={c="d"}}, 3, "This should fail.")
	end, "assert_equal should fail for identical tables with a different reference, a tolerance and a message.")
	asserts.assert_error(function()
		asserts.assert_equal(5, 4)
	end, "assert_equal should fail for different numbers.")
	asserts.assert_error(function()
		asserts.assert_equal(5, 4, "")
	end, "assert_equal should fail for different numbers and a message.")
	asserts.assert_error(function()
		asserts.assert_equal(5, 3, 1)
	end, "assert_equal should fail for different numbers that fall outside tolerance.")
	asserts.assert_error(function()
		asserts.assert_equal(5, 3, 1, "")
	end, "assert_equal should fail for different numbers that fall outside tolerance with a message.")
	asserts.assert_error(function()
		asserts.assert_equal(3, 5, 1)
	end, "assert_equal should fail for different numbers that fall outside tolerance.")
	asserts.assert_error(function()
		asserts.assert_equal(3, 5, 1, "")
	end, "assert_equal should fail for different numbers that fall outside tolerance with a message.")
end

function tests:assert_gt()
	asserts.assert_gt(2, 5)
	asserts.assert_gt(2, 5, "assert_gt for number greater than limit shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, 2)
	end, "assert_gt for equal numbers should fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, 1)
	end, "assert_gt for number smaller than limit should fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, 2, "This should fail.")
	end, "assert_gt for equal numbers and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, 1, "This should fail.")
	end, "assert_gt for number smaller than limit and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_gt("", 1)
	end, "assert_gt with limit type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_gt("", 1, "This should fail.")
	end, "assert_gt with limit type being string and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, "")
	end, "assert_gt with value type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_gt(2, "", "This should fail.")
	end, "assert_gt with value type being string and a message should fail.")
end

function tests:assert_gte()
	asserts.assert_gte(2, 5)
	asserts.assert_gte(2, 5, "assert_gt for number greater than limit shouldn't fail.")
	asserts.assert_gte(2, 2)
	asserts.assert_gte(2, 2, "assert_gte for equal numbers shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_gte(2, 1)
	end, "assert_gte for number smaller than limit should fail.")
	asserts.assert_error(function()
		asserts.assert_gte(2, 1, "This should fail.")
	end, "assert_gte for number smaller than limit and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_gte("", 1)
	end, "assert_gte with limit type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_gte("", 1, "This should fail.")
	end, "assert_gte with limit type being string and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_gte(2, "")
	end, "assert_gte with value type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_gte(2, "", "This should fail.")
	end, "assert_gte with value type being string and a message should fail.")
end

function tests:assert_lt()
	asserts.assert_lt(5, 2)
	asserts.assert_lt(5, 2, "assert_lt for number smaller than limit shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_lt(2, 2)
	end, "assert_lt for equal numbers should fail.")
	asserts.assert_error(function()
		asserts.assert_lt(1, 2)
	end, "assert_lt for number greater than limit should fail.")
	asserts.assert_error(function()
		asserts.assert_lt(2, 2, "This should fail.")
	end, "assert_lt for equal numbers and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_lt(1, 2, "This should fail.")
	end, "assert_lt for number bigger than limit and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_lt("", 1)
	end, "assert_lt with limit type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_lt("", 1, "This should fail.")
	end, "assert_lt with limit type being string and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_lt(2, "")
	end, "assert_lt with value type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_lt(2, "", "This should fail.")
	end, "assert_lt with value type being string and a message should fail.")
end

function tests:assert_lte()
	asserts.assert_lte(5, 2)
	asserts.assert_lte(5, 2, "assert_lte for number smaller than limit shouldn't fail.")
	asserts.assert_lte(2, 2)
	asserts.assert_lte(2, 2, "assert_lte for equal numbers shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_lte(1, 2)
	end, "assert_lt for number greater than limit should fail.")
	asserts.assert_error(function()
		asserts.assert_lte(1, 2, "This should fail.")
	end, "assert_lt for number bigger than limit and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_lte("", 1)
	end, "assert_lt with limit type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_lte("", 1, "This should fail.")
	end, "assert_lt with limit type being string and a message should fail.")
	asserts.assert_error(function()
		asserts.assert_lte(2, "")
	end, "assert_lt with value type being string should fail.")
	asserts.assert_error(function()
		asserts.assert_lte(2, "", "This should fail.")
	end, "assert_lt with value type being string and a message should fail.")
end

function tests:assert_len()
	asserts.assert_len(5, {"a", false, nil, 3, {}})
	asserts.assert_len(5, {"a", false, nil, 3, {}}, "assert_len for list with proper length and message shouldn't fail.")
	asserts.assert_len(5, "abcde")
	asserts.assert_len(5, "abcde", "assert_len for string with proper length and message shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_len(4, {"a", false, nil, 3, {}})
	end, "assert_len should fail when the length of the list doesn't match expected.")
	asserts.assert_error(function()
		asserts.assert_len(4, {"a", false, nil, 3, {}}, "assert_len should fail when the length of the list doesn't match expected and when a message is provided.")
	end, "assert_len should fail when the length of the list doesn't match expected and a message is provided.")
	asserts.assert_error(function()
		asserts.assert_len(4, "abcde")
	end, "assert_len should fail when the length of the string doesn't match expected.")
	asserts.assert_error(function()
		asserts.assert_len(4, "abcde", "assert_len should fail when the length of the string doesn't match expected and when a message is provided.")
	end, "assert_len should fail when the length of the string doesn't match expected and a message is provided.")
	asserts.assert_error(function()
		asserts.assert_len(5, nil)
	end, "assert_len should fail when value is nil.")
	asserts.assert_error(function()
		asserts.assert_len(5, nil, "This should fail.")
	end, "assert_len should fail when value is nil and message is provided.")
	asserts.assert_error(function()
		asserts.assert_len(4, 4)
	end, "assert_len should fail when an invalid value is passed.")
	asserts.assert_error(function()
		asserts.assert_len(4, 4, "This should fail.")
	end, "assert_len should fail when an invalid value is passed and a message is provided.")
end

function tests:assert_map_size()
	local trash_map = {}
	trash_map["a"] = "appelsap"
	trash_map[2] = 1
	trash_map[{3, b = 4}] = {a="test"}
	trash_map["b"] = "boo"
	trash_map[1] = "Look!"
	asserts.assert_map_size(5, trash_map)
	asserts.assert_map_size(5, trash_map, "assert_map_size for object with proper size and message shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_map_size(4, trash_map)
	end, "assert_map_size should fail when the size doesn't match.")
	asserts.assert_error(function()
		asserts.assert_map_size(4, trash_map, "This should fail.")
	end, "assert_map_size should fail when size doesn't match and a message is provided.")
end

function tests:assert_match()
	local match = "^[0-9]+$"
	local matching_string = "123"
	local not_matching_string = "12a3"

	asserts.assert_match(match, matching_string)
	asserts.assert_match(match, matching_string, "assert_match for matching string shouldn't fail.")
	asserts.assert_error(function()
		asserts.assert_match(match, not_matching_string)
	end, "assert_match should fail when a string is provided that doesn't match.")
	asserts.assert_error(function()
		asserts.assert_match(match, not_matching_string, "This should fail.")
	end, "assert_match should fail when a string is provided that doesn't match and a message is provided.")
end

function tests:assert_error()
	asserts.assert_error(function()
		asserts.fail("Deliberate failure.")
	end)
	asserts.assert_error(function()
		asserts.fail("Deliberate failure.")
	end, "assert_error shouldn't fail when an error happens, and a message is provided.")
	asserts.assert_error(function()
		asserts.assert_error(function()end)
	end, "assert_error should fail when no error is generated.")
	asserts.assert_error(function()
		asserts.assert_error(function()end, "This should fail.")
	end, "assert_error should fail when no error is generated and a message is provided.")
end

function tests:fail()
	ok, err = pcall(asserts.fail, "This should fail")
	if ok then
		error("fail should throw error.")
	end
end

return tests